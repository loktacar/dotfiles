" vim: set fdm=marker:
"
" @author: Viktor Alex Brynjarsson
"
" My .vimrc
"

" {{{ Options
set nocompatible                        " No compatibility with vi

" {{{ Statusline settings

" Ex. Left side:
"   /path/to/file[flags] typeoffile encoding fileformat
"
" Ex. Right side:
"   (line: 1/lineno 0%) (col.: colno) (buf.: bufno)
if has("statusline")
    set laststatus=1

    set statusline=%F               " Full path to the current file
    set statusline+=%m%r%w\         " Modified flag, read-only flag, and preview window flag
    set statusline+=%Y\             " Type of file in buffer
    set statusline+=%{&fenc==\"\"?&enc:&fenc}\ 
                                    " File encoding
    set statusline+=%{&ff}\         " File format

    set statusline+=%=\             " Split left and right

    set statusline+=(\line:\ \%l\/%L\ %p%%)\ 
                                    " Line number, total line count, and
                                    " percentage of current line and total

    set statusline+=(\col.:\ %v)\   " Column number
    set statusline+=(\buf.:\ %n)    " Buffer number
    set statusline+=%<              " Truncate status line (Show beginning)
endif
" }}}

" {{{ Title settings
" Configured like statusline is
if has("title")
    set title
    set titlestring=%F               " Full path to the current file
    set titlestring+=%m%r%w\         " Modified flag, read-only flag, and preview window flag
    set titlestring+=%Y\             " Type of file in buffer
    set titlestring+=%{&fenc==\"\"?&enc:&fenc}\ 
                                    " File encoding
    set titlestring+=%{&ff}\         " File format

    set titlestring+=%=\             " Split left and right

    set titlestring+=(\line:\ \%l\/%L\ %p%%)\ 
                                    " Line number, total line count, and
                                    " percentage of current line and total

    set titlestring+=(\col.:\ %v)\   " Column number
    set titlestring+=(\buf.:\ %n)    " Buffer number
    set titlestring+=%<              " Truncate status line (Show beginning)
endif
" }}}

set tabstop=2                           " Number of spaces that a <Tab> in file counts for.
set shiftwidth=2                        " Number of spaces to use for each step of (auto)indent.
set softtabstop=2                       " Number of spaces taht a <Tab> counts for while performing edition operations.
set expandtab                           " Insert mode: Use spaces instead of <Tab> to insert.

set hlsearch                    " Highlights search results
set incsearch                   " Incremental search, searches as you type

set nobackup
set noswapfile                  " No swap or backup files

set modeline                    " Reads last or first five lines for file specific vim settings

set list                        " Show erronius whitespace characters
set listchars=tab:\ \ ,trail:.,extends:#,precedes:#,nbsp:.

set encoding=utf-8
set wildmenu                    " Filename completion for command mode
set wildmode=list:longest
set relativenumber              " Shows the relative line numbers for the file specified when running vim
set scrolloff=5                 " Always shows 5 lines above and below cursor

set noerrorbells                " No more loud noises and distractions
set novisualbell

set timeoutlen=500              " Timeout for consecutive key combinations

set nohidden                    " No hidden buffers

set showcmd                     " Shows what characters you've built up in the "command" buffer
set more                        " If there has to be displayed more info that fits on the screen
                                " display it as ' | more' in terminal. 

set nolazyredraw                  " Doesn't draw whole window when executing macros etc.

syntax enable
filetype plugin indent on

if has("gui_running")
  set guioptions=achegirLm         " Just some gui options
  if has("win32")
    set guifont=Inconsolata:h9:cDEFAULT
  else
    set guifont=Inconsolata\ 9       " GUI font
  endif

  colorscheme molokai
else
  colorscheme koehler
endif

" }}}

" {{{ Auto commands, to be run on various occasions

" This is run so that re-sourcing .vimrc won't double the autocmd's
if !exists("custom_autocommands_loaded")

    " Specific filetype auto commands
    autocmd BufRead,BufNewFile ~/blog/*.html set filetype=mason
    autocmd BufRead,BufNewFile ~/mason/*.html set filetype=mason
    autocmd BufRead,BufNewFile *.mhtml set filetype=mako
    autocmd BufRead,BufNewFile *.mc set filetype=mako
    " For mono F# development
    autocmd BufRead,BufNewFile *.fs set filetype=fs

    autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8
          \ formatoptions+=croq softtabstop=4 smartindent
          \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS

    " Auto commands to be run upon opening/re-opening files
    autocmd BufRead,BufNewFile * set relativenumber

    " Turn off relative numbers when in insert mode
    autocmd InsertEnter * set number
    autocmd InsertLeave * set relativenumber

    let custom_autocommands_loaded = 1
endif
" }}}

" {{{ Plugin settings
filetype off
call pathogen#runtime_append_all_bundles()
filetype plugin indent on

" Options for Supertab
let g:SuperTabCrMapping=0          " Doesn't set <CR> in insert mode

let NERDTreeChDirMode=2            " Current root node is working directory
let NERDChristmasTree=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$',
            \ '\.o$', '\.so$', '\.egg$', '^\.git$' ]
let NERDTreeHighlightCursorline=1
" }}}

" {{{ Keyboard mappings
" The button that is used as <Leader>
let mapleader = ","

" Changes the ESC key to ENTER
inoremap <CR> <ESC>`^
inoremap jj <C-J>
vnoremap <CR> <ESC>

" reselect visual block after in/dedent so we can in/dedent more
vnoremap < <gv
vnoremap > >gv

" Easier window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Fold/unfold with space in normal mode
nnoremap <silent> <Space> za
" Create a fold with space in visual mode
vnoremap <silent> <Space> zf

" Getting some use out of FuzzyFinder
nnoremap <Leader>b :FufBuffer<CR>
nnoremap <Leader>f :FufFile<CR>

" Clear search easyer
nnoremap <Leader><Space> :nohlsearch<CR>

" Change working directory to current file
noremap <leader>cd :cd %:p:h<cr>

" Split windows with fewer keystrokes
noremap <leader>s :split<cr>
noremap <leader>v :vsplit<cr>

" Toggle NERDTree
noremap <leader>n :NERDTreeToggle<cr>

" }}}

" {{{ Various other settings

highlight SpellBad ctermbg=lightgray

" }}
