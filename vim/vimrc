" vim: fdm=marker:
"
" @author: Viktor Alex Brynjarsson
" My .vimrc

" This must be defined before the ALE plugin is loaded
let g:ale_completion_enabled = 1

" {{{ Plug.vim (plugin management)

call plug#begin('~/.vim/plugged')

" General plugins
Plug 'vim-airline/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-vinegar'
"Plug 'ludovicchabant/vim-gutentags'
" Asynchronous Lint Engine
Plug 'w0rp/ale'

" Fuzzy finder
Plug 'ctrlpvim/ctrlp.vim'

" Coloschemes
Plug 'patstockwell/vim-monokai-tasty'
"Plug 'tomasr/molokai'
"Plug 'sonph/onehalf', {'rtp': 'vim/'}
"Plug 'arcticicestudio/nord-vim'

" Language specific
Plug 'sheerun/vim-polyglot'
Plug 'Glench/Vim-Jinja2-Syntax', {'for': 'jinja'}
"Plug 'OmniSharp/omnisharp-vim', {'for': 'cs'}
Plug 'neoclide/coc.nvim', {'branch': 'release'}

call plug#end()

" }}}

" Syntax highlighting
syntax enable
" Load filetype plugins and indentation
filetype plugin indent on

" {{{ UI Configuration

" Using putty I get the wrong t_Co value
if (&term == "xterm")
  set t_Co=256
elseif (&term == "screen-bce")
  set t_Co=256
endif

" colorscheme (works in both gvim and vim)
" only set if exists
"let g:molokai_original=1
"let g:rehash256=1
let g:vim_monokai_tasty_italic = 1
silent! colorscheme vim-monokai-tasty
"silent! colorscheme onehalflight

" nord specific
"let g:nord_underline = 1
"let g:nord_italic = 1
"let g:nord_italic_comments = 1
"let g:nord_cursor_line_number_background = 1
"set cursorline
"silent! colorscheme nord

" italics (still nord specific)
set t_ZH=[3m
set t_ZR=[23m

" Status line
set laststatus=2

" }}}

" {{{ Keyboard Configuration

" Change ESC to ENTER
inoremap <CR> <ESC>`^
vnoremap <CR> <ESC>
" jj is now ENTER in insert mode
inoremap jj <C-J>

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" when moving between searches, center the selected line
nnoremap n nzz
nnoremap N Nzz

" Easy split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Make Y behave like other Capitals (C, D, etc.)
noremap Y y$

" Use comma to toggle folds in normal mode
nnoremap <silent> , za
" Create a fold using comma in visual mode
vnoremap <silent> , zf"

" Fix typos when saving
cnoreabbrev W w
cnoreabbrev Wq wq
cnoreabbrev WQall wqall
cnoreabbrev Wqall wqall

" The button which will be referred to as <Leader> from here on out
let mapleader = "\<Space>"

" Clear search results
nnoremap <Leader><Leader> :nohlsearch<CR>

" Do the splits
noremap <Leader>s :split<CR>
noremap <Leader>h :split<CR>
noremap <Leader>v :vsplit<CR>

" Change directory to current file dir
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>

" Disable weird Alt+Spacebar Character
inoremap <A-Space> <Space>

" Next/previous ALE warning or error
nnoremap <Leader>n :ALENextWrap<CR>
nnoremap <Leader>p :ALEPreviousWrap<CR>

" run pdflatex
autocmd filetype tex nnoremap <Leader>m :!pdflatex -shell-escape %<CR>
"
" Run markdown on file and open in browser
autocmd filetype markdown nnoremap <Leader>m :!markdown % > %.html && sensible-browser %.html<CR><CR>

" Neovim specific
if has("nvim")

  " In terminal mode use ESC to get back to normal mode
  tnoremap <ESC> <C-\><C-n>

endif

"¬†}}}

" {{{ Options

set nocompatible

" No backup, no swap
set nobackup
set noswapfile

" Custom invisibles
set list
set listchars=tab:‚ñ∏\ ,trail:‚ãÖ,extends:‚ùØ,precedes:‚ùÆ
set showbreak=‚Ü≤

" Show line numbers
set number
set relativenumber

" "Scrolling"
set scrolloff=5

" Do tabbing correctly
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
" Tab settings for specific filetypes are described in TabSettings

" Sjarrappa youuu
set noerrorbells
set novisualbell
set t_vb=

" Show me what I'm doing
set showcmd

" Highlight search results
set hlsearch
set incsearch

" I don't like the mouse
set mouse=

" Shitty fuzzy finder (use :find with * to search)
set path+=**

" Autocompletion in command mode
set wildmenu
set wildmode=list:longest

" Show what I'm search/replacing
set inccommand=split

" Create ctags with a simple command
command! MakeTags !ctags -R .

"¬†}}}

" {{{ Autocommands

" Static line numbers in insert mode
" Temporarily disabling to see if sheerun/vim-polyglot works
"augroup TabSettings
"  au!
"  autocmd filetype python setlocal tabstop=4
"  autocmd filetype python setlocal shiftwidth=4
"  autocmd filetype python setlocal softtabstop=4
"  autocmd filetype apexcode setlocal tabstop=4
"  autocmd filetype apexcode setlocal shiftwidth=4
"  autocmd filetype apexcode setlocal softtabstop=4
"  autocmd filetype apexcode setlocal noexpandtab
"  autocmd filetype apexcode setlocal listchars=tab:\ \ ,trail:‚ãÖ,extends:‚ùØ,precedes:‚ùÆ
"  autocmd filetype go setlocal tabstop=4
"  autocmd filetype go setlocal shiftwidth=4
"  autocmd filetype go setlocal softtabstop=4
"  autocmd filetype go setlocal noexpandtab
"  autocmd filetype go setlocal listchars=tab:\ \ ,trail:‚ãÖ,extends:‚ùØ,precedes:‚ùÆ
"  autocmd filetype java setlocal tabstop=4
"  autocmd filetype java setlocal shiftwidth=4
"  autocmd filetype java setlocal softtabstop=4
"  autocmd filetype java setlocal noexpandtab
"  autocmd filetype java setlocal listchars=tab:\ \ ,trail:‚ãÖ,extends:‚ùØ,precedes:‚ùÆ
"  autocmd filetype cs setlocal tabstop=4
"  autocmd filetype cs setlocal shiftwidth=4
"  autocmd filetype cs setlocal softtabstop=4
"  autocmd filetype cs setlocal noexpandtab
"  autocmd filetype cs setlocal listchars=tab:\ \ ,trail:‚ãÖ,extends:‚ùØ,precedes:‚ùÆ
"  autocmd filetype javascript setlocal tabstop=4
"  autocmd filetype javascript setlocal shiftwidth=4
"  autocmd filetype javascript setlocal softtabstop=4
"  autocmd filetype javascript setlocal expandtab
"  autocmd filetype javascript setlocal listchars=tab:\ \ ,trail:‚ãÖ,extends:‚ùØ,precedes:‚ùÆ
"augroup END

" Stupid slim template syntax not turning on the syntax in *.slim files
augroup SlimSettings
  au!
  autocmd BufRead,BufNewFile,BufEnter *.slim set filetype=slim
augroup END

" }}}

" {{{¬†Plugin Configuration

""" FZF
"nnoremap <Leader>f :FZF<CR>

""" CtrlP
let g:ctrlp_user_command = ['.git', 'cd %s; git ls-files -co --exclude-standard']
let g:ctrlp_map = '<Leader>f'

""" Airline
let g:airline_powerline_fonts = 0
let g:airline_section_z = airline#section#create_right(['%l','%L','%c'])

""" vim-json
let g:vim_json_syntax_conceal = 0

""" ale
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
"let g:ale_lint_on_enter = 1
let g:ale_linters = { 'cs': ['OmniSharp'] }
let g:ale_python_auto_pipenv = 1
let g:ale_python_pylint_auto_pipenv = 1
let g:ale_python_flake8_auto_pipenv = 1

""" COC
let g:coc_global_extensions=[ 'coc-omnisharp' ]
inoremap <silent><expr> <c-space> coc#refresh()
"nnoremap <silent> K :call <SID>show_documentation()<CR>
autocmd User CocJumpPlaceholder call
        \ CocActionAsync('showSignatureHelp')

" }}}

" {{{ Extensions

""" Silver searcher search
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " bind K to grep word under cursor
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
endif

" }}}
